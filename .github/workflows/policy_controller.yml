name: Policy Controller

on:
  pull_request:
    paths:
      - .github/workflows/policy_controller.yml
      - Cargo.lock
      - Cargo.toml
      - charts/linkerd-control-plane/templates/destination-rbac.yaml
      - charts/linkerd-crds/templates/policy/**
      - deny.toml
      - policy-controller/**
      - policy-test/**
      - rust-toolchain

permissions:
  contents: read

env:
  CARGO_ACTION_FMT_VERSION: v0.1.3
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  K3D_VERSION: v5.4.1
  PROTOC_NO_VENDOR: 1
  PROXY_INIT_VERSION: v1.5.3
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10


jobs:
  fmt:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.60.0
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  audit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing Ci.
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
    - uses: EmbarkStudios/cargo-deny-action@9b350011b9d68c51a7ad7c2e7ec04bcc15dd0644
      with:
        command: check ${{ matrix.checks }}

  clippy:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.60.0
    steps:
      - run: rustup component add clippy
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          bin/scurl -o /usr/local/bin/cargo-action-fmt "https://github.com/olix0r/cargo-action-fmt/releases/download/release%2F${CARGO_ACTION_FMT_VERSION}/cargo-action-fmt-x86_64-unknown-linux-gnu"
          chmod 755 /usr/local/bin/cargo-action-fmt
      - run: cargo fetch --locked
      - name: Run cargo clippy
        run: cargo clippy --frozen --all --no-deps --message-format=json | cargo-action-fmt

  check:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.60.0
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          bin/scurl -o /usr/local/bin/cargo-action-fmt "https://github.com/olix0r/cargo-action-fmt/releases/download/release%2F${CARGO_ACTION_FMT_VERSION}/cargo-action-fmt-x86_64-unknown-linux-gnu"
          chmod 755 /usr/local/bin/cargo-action-fmt
      - run: cargo fetch --locked
      # Check each crate independently to ensure its Cargo.toml is sufficient.
      - run: |
          for toml in $(find . -mindepth 2 -name Cargo.toml | sort -r)
          do
            d=$(dirname "$toml")
            echo "# $d"
            (cd $d ; cargo check --all-targets --frozen --message-format=json | cargo-action-fmt)
          done

  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      image: docker://rust:1.60.0
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: cargo fetch --locked
      - name: Build tests
        run: cargo test --workspace --exclude=linkerd-policy-test --frozen --no-run
      - name: Run cargo test
        run: cargo test --workspace --exclude=linkerd-policy-test --frozen

  rust-toolchain:
    name: rust toolchain
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - run: |
          ex=0

          # Check this workflow against the version in rust-toolchain.
          versions=$(sed -nE 's|.*docker://(.*/)?rust:([^ #]+).*|\2|p' .github/workflows/policy_controller.yml)
          for mismatch in $(echo "$versions" | grep -vF "$(cat rust-toolchain)" || true) ; do
            echo "::error file=.github/workflows/policy_controller.yml::Workflow uses incorrect rust version(s): $mismatch"
            ex=$((ex + 1))
          done

          # Check the policy-controller dockerfiles workflow against the version
          # in rust-toolchain.
          for f in policy-controller/*.dockerfile ; do
            versions=$(sed -nE 's|ARG RUST_IMAGE=(.*/)?rust:([^ #]+).*|\2|p' "$f")
            for mismatch in $(echo "$versions" | grep -vF "$(cat rust-toolchain)" || true) ; do
              echo "::error file=\"$f\"::$f uses incorrect rust version(s): $mismatch"
              ex=$((ex + 1))
            done
          done

          exit $ex

  docker-build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        component:
          - cli-bin
          - controller
          - policy-controller
          - proxy
    name: Docker build (${{ matrix.component }})
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      - uses: ./.github/actions/docker-build
        with:
          docker-registry: ghcr.io/linkerd
          docker-target: linux-amd64
          component: ${{ matrix.component }}
      # TAG is set by docker-build
      - run: echo $TAG
      - name: Create artifact with CLI and image archives
        run: |
          mkdir -p /home/runner/archives
          docker save "ghcr.io/linkerd/${{ matrix.component }}:$TAG" \
            >/home/runner/archives/${{ matrix.component }}.tar
      - name: Upload artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
        with:
          name: image-archives
          path: /home/runner/archives

  integration-build:
    runs-on: ubuntu-20.04
    name: Integration build
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Install rust
        run: |
          rm -rf $HOME/.cargo
          bin/scurl -v https://sh.rustup.rs | sh -s -- -y --default-toolchain $(cat rust-toolchain)
          source $HOME/.cargo/env
          echo "PATH=$PATH" >> $GITHUB_ENV
          bin/scurl -o /usr/local/bin/cargo-action-fmt "https://github.com/olix0r/cargo-action-fmt/releases/download/release%2F${CARGO_ACTION_FMT_VERSION}/cargo-action-fmt-x86_64-unknown-linux-gnu"
          chmod 755 /usr/local/bin/cargo-action-fmt
          bin/scurl -L https://get.nexte.st/latest/linux | tar xzf - -C /usr/local/bin
          cargo version
          cargo-action-fmt --version
          cargo nextest --version

      - run: mkdir target
      - run: cargo fetch --locked
      - run: cargo metadata --format-version 1 >target/metadata.json
      - run: cargo nextest list --frozen --package=linkerd-policy-test --list-type=binaries-only --message-format=json >target/nextest.json
      - name: Create tarball
        run: |
          mkdir -p /home/runner/archives
          jq -r '.["rust-binaries"] | to_entries | .[].value | .["binary-path"]' target/nextest.json | sed -e "s,^$PWD/,," \
            | xargs tar -czvf /home/runner/archives/nextest.tar.gz target/nextest.json target/metadata.json
      - name: Upload artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
        with:
          name: image-archives
          path: /home/runner/archives


  integration:
    strategy:
      matrix:
        k8s:
          - v1.20
          - v1.23
    name: Policy controller integration (k8s ${{ matrix.k8s }})

    needs: [docker-build, integration-build]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    env:
      LINKERD_DOCKER_REGISTRY: ghcr.io/linkerd
    steps:
      - name: Checkout code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b

      - name: Install rust
        run: |
          rm -rf $HOME/.cargo
          bin/scurl -v https://sh.rustup.rs | sh -s -- -y --default-toolchain $(cat rust-toolchain)
          source $HOME/.cargo/env
          echo "PATH=$PATH" >> $GITHUB_ENV
          bin/scurl -o /usr/local/bin/cargo-action-fmt "https://github.com/olix0r/cargo-action-fmt/releases/download/release%2F${CARGO_ACTION_FMT_VERSION}/cargo-action-fmt-x86_64-unknown-linux-gnu"
          chmod 755 /usr/local/bin/cargo-action-fmt
          bin/scurl -L https://get.nexte.st/latest/linux | tar xzf - -C /usr/local/bin
          cargo version
          cargo-action-fmt --version
          cargo nextest --version

      - run: bin/scurl -v https://raw.githubusercontent.com/k3d-io/k3d/${K3D_VERSION}/install.sh | bash
      - run: k3d --version
      - run: k3d cluster create --no-lb --k3s-arg "--no-deploy=local-storage,traefik,servicelb,metrics-server@server:*" --image +${{ matrix.k8s }}
      - run: kubectl version

      - name: Download image archives
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: image-archives
          path: image-archives
      - name: Load test binaries
        run: tar -xzvf image-archives/nextest.tar.gz
      - name: Load images
        run: |
          docker pull -q docker.io/bitnami/kubectl:latest &
          docker pull -q docker.io/curlimages/curl:latest &
          docker pull -q docker.io/library/nginx:latest &
          docker pull -q ghcr.io/linkerd/proxy-init:$PROXY_INIT_VERSION &
          wait # Wait for pulls to complete
          docker load <image-archives/controller.tar
          docker load <image-archives/policy-controller.tar
          docker load <image-archives/proxy.tar
          docker image ls | grep -F -e bitnami/kubectl -e curlimages/curl -e nginx -e ghcr.io/linkerd
          tag="$(CI_FORCE_CLEAN=1 bin/root-tag)"
          # Image loading is flakey in CI, so retry!
          until k3d image import \
                  docker.io/bitnami/kubectl:latest \
                  docker.io/curlimages/curl:latest \
                  docker.io/library/nginx:latest \
                  ghcr.io/linkerd/controller:$tag \
                  ghcr.io/linkerd/policy-controller:$tag \
                  ghcr.io/linkerd/proxy:$tag \
                  ghcr.io/linkerd/proxy-init:$PROXY_INIT_VERSION ; do
            sleep 2
            echo retrying...
          done

      # Install the Linkerd CLI from a docker image
      - name: Install the Linkerd CLI
        run: |
          tag="$(CI_FORCE_CLEAN=1 bin/root-tag)"
          docker load <image-archives/cli-bin.tar
          container_id=$(docker create "ghcr.io/linkerd/cli-bin:$tag")
          docker cp "$container_id":/out/linkerd-linux-amd64 /usr/local/bin/linkerd
          docker rm "$container_id"
      - run: linkerd check --pre --wait=1m
      - run: linkerd install --crds | kubectl apply -f -
      - run: |
          kubectl wait --for condition=established --timeout=60s crd \
            authorizationpolicies.policy.linkerd.io \
            meshtlsauthentications.policy.linkerd.io \
            networkauthentications.policy.linkerd.io \
            servers.policy.linkerd.io \
            serverauthorizations.policy.linkerd.io
      - run: linkerd install | kubectl apply -f -
      - run: linkerd check --wait=1m

      # Run the tests. We disable parallelism to avoid spurious timeouts caused
      # by resource contention.
      - run: cargo nextest run --cargo-metadata=target/metadata.json --binaries-metadata=target/nextest.json --test-threads=1
        env:
          NEXTEST_EXPERIMENTAL_REUSE_BUILD: 1
