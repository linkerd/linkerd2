name: Policy Controller

on:
  pull_request:
    paths:
      - 'Cargo.lock'
      - 'Cargo.toml'
      - 'deny.toml'
      - 'rust-toolchain'
      - 'policy-controller/**'

permissions:
  contents: read

jobs:
  fmt:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.55.0
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  audit:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing Ci.
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
    - uses: EmbarkStudios/cargo-deny-action@0ca727bbae7b7b578b9a5f98186caac35aa2a00d
      with:
        command: check bans licenses sources

  clippy:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.55.0
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
      - run: rustup component add clippy
      - run: cargo clippy --workspace --all-targets

  check:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    container:
      image: docker://rust:1.55.0
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
      # Check each crate independently to ensure its Cargo.toml is sufficient.
      - run: |
          for d in $(for toml in $(find . -mindepth 2 -name Cargo.toml) ; do echo ${toml%/*} ; done | sort -r )
          do
            echo "# $d"
            (cd $d ; cargo check --all-targets)
          done

  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container:
      image: docker://rust:1.55.0
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97
      - run: cargo test --workspace
