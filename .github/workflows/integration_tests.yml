name: Integration tests
on:
  pull_request: {}
  push:
    paths-ignore:
    - '*.md'
    - '**/*.md'
    - 'web/app/package.json'
    branches:
    - main
permissions:
  contents: read
env:
  GH_ANNOTATION: true
jobs:
  docker_build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # Keep in sync with release.yaml matrix build
        target: [proxy, controller, policy-controller, metrics-api, web, cni-plugin, debug, cli-bin, grafana, jaeger-webhook, tap]
    name: Docker build (${{ matrix.target }})
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo "TAG=$(CI_FORCE_CLEAN=1 bin/root-tag)" >> $GITHUB_ENV

        . bin/_docker.sh
        echo "DOCKER_REGISTRY=cr.l5d.io/linkerd" >> $GITHUB_ENV
        echo "DOCKER_BUILDKIT_CACHE=${{ runner.temp }}/.buildx-cache" >> $GITHUB_ENV
    - name: Cache docker layers
      uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ${{ env.DOCKER_BUILDKIT_CACHE }}
        key: ${{ runner.os }}-buildx-${{ matrix.target }}-${{ env.TAG }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.target }}-
    - name: Build docker images
      run: |
        docker buildx create --driver docker-container --use
        bin/docker-build-${{ matrix.target }}
    - name: Prune docker layers cache
      # changes generate new images while the existing ones don't get removed
      # so we manually do that to avoid bloating the cache
      run: bin/docker-cache-prune
    - name: Create artifact with CLI and image archives
      env:
        ARCHIVES: /home/runner/archives
      run: |
        mkdir -p $ARCHIVES
        docker save "cr.l5d.io/linkerd/${{ matrix.target }}:$TAG" > $ARCHIVES/${{ matrix.target }}.tar
    # `with.path` values do not support environment variables yet, so an
    # absolute path is used here.
    #
    # https://github.com/actions/upload-artifact/issues/8
    - name: Upload artifact
      uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074
      with:
        name: image-archives
        path: /home/runner/archives
  # todo: Keep in sync with `release.yml`
  integration_tests:
    strategy:
      matrix:
        integration_test:
        - cluster-domain
        - deep
        - external-issuer
        - external-prometheus-deep
        - external-resources
        - helm-deep
        - helm-upgrade
        - multicluster
        - uninstall
        - upgrade-edge
        - upgrade-stable
        - cni-calico-deep
    needs: [docker_build]
    name: Integration tests (${{ matrix.integration_test }})
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
    - name: Try to load cached Go modules
      uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Set environment variables from scripts
      run: |
        . bin/_tag.sh
        echo "TAG=$(CI_FORCE_CLEAN=1 bin/root-tag)" >> $GITHUB_ENV

        . bin/_docker.sh
        echo "DOCKER_REGISTRY=cr.l5d.io/linkerd" >> $GITHUB_ENV
    - name: Download image archives
      uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
      with:
        name: image-archives
        path: image-archives
    - name: Load cli-bin image into local docker images
      run: docker load < image-archives/cli-bin.tar
    - name: Install CLI
      run: |
        # Copy the CLI out of the local cli-bin container.
        container_id=$(docker create "cr.l5d.io/linkerd/cli-bin:$TAG")
        docker cp $container_id:/out/linkerd-linux-amd64 "$HOME/.linkerd"

        # Validate the CLI version matches the current build tag.
        [[ "$TAG" == "$($HOME/.linkerd version --short --client)" ]]
    - name: Run integration tests
      run: |
        bin/tests --images archive --cleanup-docker --name ${{ matrix.integration_test }} "$HOME/.linkerd"
