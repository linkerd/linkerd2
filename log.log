commit 99d58192327849203e751058b801e30539242b95
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 15 16:55:28 2021 -0700ddd

    Enable TLS detection on port 443 (#6887)
    
    We've previously handled inbound connections on 443 as opaque, meaning
    that we don't do any TLS detection.
    
    This prevents the proxy from reporting meaningful metadata on these TLS
    connections--especially the connection's SNI value.
    
    This change also simplifies the core control plane's configuration for
    skipping outbound connection on 443 to be much simpler (and
    documented!).


commit ad92e052d0e05238e829caf91aca1ad49c43428a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 15 11:31:09 2021 -0700dd

    policy: Support JSON log formatting (#6888)
    
    The policy controller only emitted logs in the default plain format.
    
    This change adds new CLI flags to the policy-controller: `--log-format`
    and `--log-level` that configure logging (replacing the `RUST_LOG`
    environment variable). The helm chart is updated to configure these
    flags--the `controllerLogLevel` variable is used to configure the policy
    controller as well.
    
    Example:
    
    ```
    {"timestamp":"2021-09-15T03:30:49.552704Z","level":"INFO","fields":{"message":"HTTP admin server listening","addr":"0.0.0.0:8080"},"target":"linkerd_policy_controller::admin","spans":[{"addr":"0.0.0.0:8080","name":"serve"}]}
    {"timestamp":"2021-09-15T03:30:49.552689Z","level":"INFO","fields":{"message":"gRPC server listening","addr":"0.0.0.0:8090"},"target":"linkerd_policy_controller","spans":[{"addr":"0.0.0.0:8090","cluster_networks":"[10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16]","name":"grpc"}]}
    {"timestamp":"2021-09-15T03:30:49.567734Z","level":"DEBUG","fields":{"message":"Ready"},"target":"linkerd_policy_controller_k8s_index"}
    ^C{"timestamp":"2021-09-15T03:30:51.245387Z","level":"DEBUG","fields":{"message":"Received ctrl-c"},"target":"linkerd_policy_controller"}
    {"timestamp":"2021-09-15T03:30:51.245473Z","level":"INFO","fields":{"message":"Shutting down"},"target":"linkerd_policy_controller"}
    ```
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 6fac04eaee33557fac7f11303f9007ab32a8344c
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Wed Sep 15 08:10:27 2021 -0600dd

    opaque ports check: consider service and pod ports when checking annotation values (#6801)
    
    After #6719 merged the proxy injector started adding a default list for the `config.linkerd.io/opaque-ports` annotation to pods and services if they and their namespace do not have the annotation already.
    
    Addresses part of #6783
    
    For the control plane, the default list that pods get can be different than the services that select them. For example, the `linkerd-sp-validator` exposes `443`—which is opaque by default—but it targets `8443` on `linkerd-destination` pods which is not opaque by default. Therefore, `linkerd-sp-validator`'s default list is `443` and `linkerd-destination`'s default list is `8443`.
    
    The way that the opaque ports check currently works is it naively issues warnings when a service and a pod that it selects have different values for the annotation. With this change, it now accounts for the service's `port` and `targetPort` and the pod's `containerPort`.
    
    ---
    
    The main change about the opaque ports check is it now considers `service.Spec.Ports` and `pod.Spec.Containers.Ports`. Using those port lists, it can now figure out when a service targets—by integer or name—an opaque port on a pod and warn the user if it is not annotated on the pod.
    
    Additionally, it can look at a pods's opaque port list and warn the user if a service that targets any of the ports—again by integer or name—does not have that port marked as opaque.
    
    This solves the problem above about a service marking `443` as opaque, but a pod that it selects marking `8443` as opaque. The check can now see that `443 == sp-validator`, and `sp-validator == 8443`  on the pod.
    
    I've updated the unit tests and added some additional ones that exercise the named port behavior.
    
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 45478b6db836771bb57d87cbd60f64ea572c5527
Author: Tarun Pothulapati <tarunpothulapati@outlook.com>
Date:   Wed Sep 15 10:59:36 2021 +0530dd

    viz: support `stat` on new policy resources (#6785)
    
    Fixes #6733
    
    As policy resources provide a grouping, statistics summaries should
    also be allowed on these groupings which are useful to the user. Them
    being port specific provide a great way to break down these metrics
    further.
    
    This PR adds support for policy resources i.e `server` and `serverauthorization`
     on the `stat` command.
    
    ## Changes
    
    This adds a new path in the `stat_summary.go` file to handle policy
    objects. I tried to see if we could re-use some of the other paths
    but some of the labels seems to differ and hence a different path
    had to be created. We can try to refactor and merge them though.
    
    We support both request and TCP metrics for the `server` resource
    while only the former with `serverauthorization` resources
    as metrics are generated in this manner.
    
    This also adds these policy objects into the `k8s` package to
    make them as known resources.
    
    For both the policy resources, `--from` doesn't work as these
    metrics are not exposed from outbound, and there is no way to
    query about the client workload from the inbound metrics. `--to`
    is supported to get metrics specifically for a destination workload.
    (just like on a service)
    
    ## Testing
    
    ```bash
    > curl -sL https://run.linkerd.io/emojivoto.yml | linkerd inject --proxy-log-level debug - | kubectl apply -f -
    
    > kubectl apply -f https://gist.githubusercontent.com/Pothulapati/69edb59fb1c54c3d993e1ad5145571d4/raw/897de1a8d57e3606420ca845c6abfd69bf241fb2/emojivoto-policy.yml
    
    
    # Initial values
    on ⛵ kind-kind  linkerd2 on 🌱 taru [📦📝🤷‍] via 🐼 v1.16.7 via  via ❄️  impure (shell)
    ➜ ./bin/go-run cli viz stat srv -A -owide                                                                                                         ~/work/linkerd2
    NAMESPACE   NAME          UNAUTHORIZED   SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99   TCP_CONN   READ_BYTES/SEC   WRITE_BYTES/SEC
    emojivoto   emoji-grpc          0.0rps   100.00%   1.8rps           1ms           1ms           3ms          1         188.6B/s         2072.9B/s
    emojivoto   prom                0.0rps         -        -             -             -             -          -                -                 -
    emojivoto   voting-grpc         0.0rps    80.70%   0.9rps           1ms           2ms           3ms          1          91.4B/s           52.7B/s
    emojivoto   web-http            0.0rps    90.68%   2.0rps           2ms          10ms          28ms          1         153.7B/s         4509.4B/s
    
    # After changing the `emoji-grpc` authz
    on ⛵ kind-kind  linkerd2 on 🌱 taru [📦📝🤷‍] via 🐼 v1.16.7 via  via ❄️  impure (shell) took 2s
    ➜ ./bin/go-run cli viz stat srv -A -owide                                                                                                         ~/work/linkerd2
    NAMESPACE   NAME          UNAUTHORIZED   SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99   TCP_CONN   READ_BYTES/SEC   WRITE_BYTES/SEC
    emojivoto   emoji-grpc          0.3rps   100.00%   1.1rps           0ms           0ms           0ms          1         156.5B/s         1282.4B/s
    emojivoto   prom                0.0rps         -        -             -             -             -          -                -                 -
    emojivoto   voting-grpc         0.0rps    87.88%   0.6rps           0ms           0ms           0ms          1          53.5B/s           31.5B/s
    emojivoto   web-http            0.0rps    61.18%   1.4rps           1ms           2ms           2ms          1         110.2B/s         2195.7B/s
    
    # after changing the `web-http` authz
    
    on ⛵ kind-kind  linkerd2 on 🌱 taru [📦📝🤷‍] via 🐼 v1.16.7 via  via ❄️  impure (shell)
    ➜ ./bin/go-run cli viz stat srv -A -owide                                                                                                         ~/work/linkerd2
    NAMESPACE   NAME          UNAUTHORIZED   SUCCESS   RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99   TCP_CONN   READ_BYTES/SEC   WRITE_BYTES/SEC
    emojivoto   emoji-grpc          0.0rps         -     -             -             -             -          -                -                 -
    emojivoto   prom                0.0rps         -     -             -             -             -          -                -                 -
    emojivoto   voting-grpc         0.0rps         -     -             -             -             -          -                -                 -
    emojivoto   web-http            1.0rps         -     -             -             -             -          -                -                 -
    
    > linkerd  viz stat srv/emoji-grpc -n emojivoto -owide
    NAME         SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99   TCP_CONN   READ_BYTES/SEC   WRITE_BYTES/SEC
    emoji-grpc        100.00%   2.0rps           1ms           1ms           1ms          1         199.9B/s         2208.0B/s
    
    > linkerd  viz stat srv/web-http -n emojivoto -owide
    NAME      SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99   TCP_CONN   READ_BYTES/SEC   WRITE_BYTES/SEC
    web-http         94.02%   1.9rps           4ms           9ms          10ms          1         152.7B/s         4505.9B/s
    
    > linkerd  viz stat srv -n emojivoto -o wide
    NAME          MESHED   SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99   TCP_CONN   READ_BYTES/SEC   WRITE_BYTES/SEC
    emoji-grpc         -   100.00%   2.0rps           1ms           1ms           1ms          1         201.6B/s         2209.8B/s
    prom               -         -        -             -             -             -          -                -                 -
    voting-grpc        -    86.21%   1.0rps           1ms           1ms           1ms          1          98.3B/s           55.9B/s
    web-http           -    91.67%   2.0rps           3ms           8ms          10ms          1         157.7B/s         4600.3B/s
    
    
    > linkerd  viz stat serverauthorization/web-public -n emojivoto
    NAME       MESHED   SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99
    web-http        -    89.83%   2.0rps           3ms           9ms          10ms
    
    > linkerd viz stat saz -n emojivoto
    NAME          AUTHORIZATION     MESHED   SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99
    emoji-grpc    emoji-grpc             -   100.00%   2.0rps           1ms           1ms           1ms
    prom          prom-prometheus        -         -        -             -             -             -
    voting-grpc   voting-grpc            -    89.83%   1.0rps           1ms           1ms           1ms
    web-http      web-public             -    94.96%   2.0rps           1ms           5ms           9ms
    
    > linkerd viz stat saz/web-public -n emojivoto
    NAME       AUTHORIZATION   MESHED   SUCCESS      RPS   LATENCY_P50   LATENCY_P95   LATENCY_P99
    web-http   web-public           -    90.00%   2.0rps           1ms           5ms           9ms
    ```
    
    Signed-off-by: Tarun Pothulapati <tarunpothulapati@outlook.com>

commit ed9488f571ed358f2939f4fc04df31e69a7ff1f0
Author: Alejandro Pedraza <alejandro@buoyant.io>
Date:   Tue Sep 14 17:06:30 2021 -0500dd

    Add default policy annotation to linkerd-identity (#6886)
    
    In #6873 we made it so that linkerd-identity also discovers its own
    policy, using the default policy at startup. So we need to force the
    default policy to be `all-unauthenticated` just like we do for
    destination and the injector; otherwise when installing linkerd with a
    `deny` default policy the linkerd-identity pod won't start.

commit d67cd064bbfc033ca3dcdaedb1b7a7488c68bc36
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 14 08:37:48 2021 -0700dd

    Configure the identity's controller proxy to discovery policies (#6873)
    
    Now that the proxy uses its default policy at startup and can discover
    its policies lazily, the identity controller no longer must be exempt
    from policy discovery. This enables the identity controller to enforce
    admin server policies, in particular.
    
    This change enables policy discovery on the identity controller.



commit 68609d31544265e56858dc36188654a26d349f6e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 13:42:37 2021 -0700

    proxy: v2.158.0 (#6870)
    
    This release features improved memory utilization, especially for TCP
    forwarding. Previously 128KB was allocated for each proxied connection.
    This has been reduced to 16KB.
    
    This release also includes updates to the inbound policy system:
    connections are now always permitted from localhost and logging has been
    improved to make it easier to debug policy issues.
    
    ---
    
    * Update Rust to 1.55.0 (linkerd/linkerd2-proxy#1251)
    * Use a dedicated error type for HTTP response timeouts (linkerd/linkerd2-proxy#1248)
    * duplex: Reduce copy buffer size from 64KB to 8KB (linkerd/linkerd2-proxy#1253)
    * Fix lints found on nightly (linkerd/linkerd2-proxy#1255)
    * profiles: Share context-token allocations across instances (linkerd/linkerd2-proxy#1257)
    *  stack: Replace BoxNewService with ArcNewService (linkerd/linkerd2-proxy#1254)
    * inbound: Reduce needless allocation in stack targets (linkerd/linkerd2-proxy#1256)
    * inbound: Always permit connections from localhost (linkerd/linkerd2-proxy#1259)
    * Improve logs around authorization decisions (linkerd/linkerd2-proxy#1252)
    * inbound: Improve policy-based protocol detection (linkerd/linkerd2-proxy#1258)

commit 9d331bf4c2cf4ca8ca66faec307b1cbe20ad012b
Author: Alex Leong <alex@buoyant.io>
Date:   Fri Sep 10 16:19:49 2021 -0700dd

    Create linkerd authz command (#6831)
    
    We add a `linkerd authz <resource>` command for listing all server authorizations which apply to a specified resource.
    
    ```
    > linkerd authz deployment/web -n emojivoto
      SERVER  AUTHORIZATION
    web-http     web-public
    ```
    
    It works by iterating through each authorization, using the label selector to find the authorization's servers, and then using the server's label selector to find all pods with that server.  If the requested resource contains any of the selected pods then we print the authorization.  Note that this relies entirely on the existence of resources and their label selector bindings, and does not depend on actual traffic or on proxy metrics.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 00828671024267ab6355ee2b53a5b07c7cc6fbbb
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Fri Sep 10 13:54:11 2021 -0600

    override docker registry in install-pr script (#6848)
    
    Images created based off PRs now use the `ghcr.io/linkerd` registry. `bin/docker-pull-binaries` which is used by this script uses the default `cr.l5d.io/linkerd`. This results in no binary being pulled because `bin/install-pr` is using the incorrect image name.
    
    This change overrides the `DOCKER_REGISTRY` in `bin/install-pr` so that the correct name is used when pulling the binary.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>


commit 2b383e4d58793a28b8a7fa3646f43d0437fac8c3
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 10 09:36:09 2021 -0700

    policy: Detect when a server's protocol changes (#6856)
    
    Currently, the policy controller's indexing does not detect when a
    server update changes its protocol (due to an incorrect comparison).
    This change fixes this comparison so that protocol hint changes are
    properly honored.


