// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: viz_tap.proto

package tap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tap_Tap_FullMethodName           = "/linkerd2.tap.Tap/Tap"
	Tap_TapByResource_FullMethodName = "/linkerd2.tap.Tap/TapByResource"
)

// TapClient is the client API for Tap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TapClient interface {
	// Deprecated: Do not use.
	Tap(ctx context.Context, in *TapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TapEvent], error)
	// Deprecated: Do not use.
	TapByResource(ctx context.Context, in *TapByResourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TapEvent], error)
}

type tapClient struct {
	cc grpc.ClientConnInterface
}

func NewTapClient(cc grpc.ClientConnInterface) TapClient {
	return &tapClient{cc}
}

// Deprecated: Do not use.
func (c *tapClient) Tap(ctx context.Context, in *TapRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TapEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tap_ServiceDesc.Streams[0], Tap_Tap_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TapRequest, TapEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_TapClient = grpc.ServerStreamingClient[TapEvent]

// Deprecated: Do not use.
func (c *tapClient) TapByResource(ctx context.Context, in *TapByResourceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TapEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tap_ServiceDesc.Streams[1], Tap_TapByResource_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TapByResourceRequest, TapEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_TapByResourceClient = grpc.ServerStreamingClient[TapEvent]

// TapServer is the server API for Tap service.
// All implementations must embed UnimplementedTapServer
// for forward compatibility.
type TapServer interface {
	// Deprecated: Do not use.
	Tap(*TapRequest, grpc.ServerStreamingServer[TapEvent]) error
	// Deprecated: Do not use.
	TapByResource(*TapByResourceRequest, grpc.ServerStreamingServer[TapEvent]) error
	mustEmbedUnimplementedTapServer()
}

// UnimplementedTapServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTapServer struct{}

func (UnimplementedTapServer) Tap(*TapRequest, grpc.ServerStreamingServer[TapEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Tap not implemented")
}
func (UnimplementedTapServer) TapByResource(*TapByResourceRequest, grpc.ServerStreamingServer[TapEvent]) error {
	return status.Errorf(codes.Unimplemented, "method TapByResource not implemented")
}
func (UnimplementedTapServer) mustEmbedUnimplementedTapServer() {}
func (UnimplementedTapServer) testEmbeddedByValue()             {}

// UnsafeTapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapServer will
// result in compilation errors.
type UnsafeTapServer interface {
	mustEmbedUnimplementedTapServer()
}

func RegisterTapServer(s grpc.ServiceRegistrar, srv TapServer) {
	// If the following call pancis, it indicates UnimplementedTapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tap_ServiceDesc, srv)
}

func _Tap_Tap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapServer).Tap(m, &grpc.GenericServerStream[TapRequest, TapEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_TapServer = grpc.ServerStreamingServer[TapEvent]

func _Tap_TapByResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TapByResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapServer).TapByResource(m, &grpc.GenericServerStream[TapByResourceRequest, TapEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_TapByResourceServer = grpc.ServerStreamingServer[TapEvent]

// Tap_ServiceDesc is the grpc.ServiceDesc for Tap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linkerd2.tap.Tap",
	HandlerType: (*TapServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tap",
			Handler:       _Tap_Tap_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TapByResource",
			Handler:       _Tap_TapByResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "viz_tap.proto",
}
