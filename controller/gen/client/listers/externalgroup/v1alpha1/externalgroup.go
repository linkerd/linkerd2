/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/linkerd/linkerd2/controller/gen/apis/externalgroup/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalGroupLister helps list ExternalGroups.
// All objects returned here must be treated as read-only.
type ExternalGroupLister interface {
	// List lists all ExternalGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalGroup, err error)
	// ExternalGroups returns an object that can list and get ExternalGroups.
	ExternalGroups(namespace string) ExternalGroupNamespaceLister
	ExternalGroupListerExpansion
}

// externalGroupLister implements the ExternalGroupLister interface.
type externalGroupLister struct {
	indexer cache.Indexer
}

// NewExternalGroupLister returns a new ExternalGroupLister.
func NewExternalGroupLister(indexer cache.Indexer) ExternalGroupLister {
	return &externalGroupLister{indexer: indexer}
}

// List lists all ExternalGroups in the indexer.
func (s *externalGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalGroup))
	})
	return ret, err
}

// ExternalGroups returns an object that can list and get ExternalGroups.
func (s *externalGroupLister) ExternalGroups(namespace string) ExternalGroupNamespaceLister {
	return externalGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalGroupNamespaceLister helps list and get ExternalGroups.
// All objects returned here must be treated as read-only.
type ExternalGroupNamespaceLister interface {
	// List lists all ExternalGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalGroup, err error)
	// Get retrieves the ExternalGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ExternalGroup, error)
	ExternalGroupNamespaceListerExpansion
}

// externalGroupNamespaceLister implements the ExternalGroupNamespaceLister
// interface.
type externalGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalGroups in the indexer for a given namespace.
func (s externalGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalGroup))
	})
	return ret, err
}

// Get retrieves the ExternalGroup from the indexer for a given namespace and name.
func (s externalGroupNamespaceLister) Get(name string) (*v1alpha1.ExternalGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("externalgroup"), name)
	}
	return obj.(*v1alpha1.ExternalGroup), nil
}
